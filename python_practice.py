# def dataset_sums(*args):
#     sums = []
#     i = 0
#     while i < len(args):
#         sums.append((sum(list(args[i:i+2]))))
#         i += 2
#     return " ".join(map(lambda el: str(el), sums))

# # print(dataset_sums(
# # 841620, 220224,
# # 144514, 487169,
# # 886820, 636959,
# # 358134, 505328,
# # 71550, 967259,
# # 233978, 16146,
# # 524864, 553157,
# # 137969, 314182,
# # 853805, 239048,
# # 24978 ,794714,
# # 287925, 448595,
# # 420866, 589956,
# # 603715, 39244))

        


# def min_pair_value(*args):
#     i = 0
#     mins = []
#     while i < len(args):
#         mins.append(min([ args[i], args[i+1] ] ))
#         i += 2
#     return " ".join(map(lambda x : str(x), mins))
    
# # print(min_pair_value(
# # -1839370, -1152576,
# # 7176303, -2156052,
# # -7826307, -3482212,
# # 9665686, 7395385,
# # -8407223, -5745710,
# # 6065222, -7410281,
# # 5566346, 4750400,
# # -6272391, 6513845,
# # -5188829, -1392040,
# # 8259488, 9509492,
# # -8433359, 6098676,
# # 6900458, -7479556,
# # 723073, 5324157,
# # 172009, 8155045,
# # -1473546, 4830009,
# # -9535404, 6687083,
# # -6322566, 7640899,
# # -5468969, -4148874,
# # -5841313, -5803282,
# # -6753489, -4248536,
# # -1548993, 9311733
# #     ))

# def min_trips_value(*args):
#     i = 0
#     count = 0
#     mins = []
#     while i < len(args):
#         mins.append(min( args[i], args[i+1], args[i+2] ))
#         i += 3
#         count += 1
#         if count == 28:
#             break
#     return " ".join(map(lambda x : str(x), mins))

# # print(min_trips_value(
# # -5975408, 4130445, 6507791,
# # 6360765, -8012910, -9451959,
# # 5616260, 112788, 63500,
# # -4063468, -3774805, -4469652,
# # 8729467, 992613, 9344046,
# # 6657978, -829241, 5455046,
# # -8010822, 4306616, 3724168,
# # 6076873, 1576600, -1538977,
# # -7083299, 7974761, 3831154,
# # 3373434, -1953684, 2477157,
# # -746490, 2070907, -3392398,
# # -4238699, -1568328, -1405309,
# # -3690659, -5952067, 8707479,
# # 6372840, -15535, -5067326,
# # -8096811, -1286068, 5925286,
# # -8752764, -4628089, -4903954,
# # 6702281, -2638912, 9402661,
# # 426450, -6562038, 979261,
# # 8887473, -3645337, -1045977,
# # 2718627, 9728097, 7000338,
# # -4804215, -1018393, -928755,
# # 1803386, 4742907, 7502917,
# # -9601922, -8947752, -8449149,
# # 9105557, 7425088, 1535315,
# # -5961768, 9328277, -9750752,
# # 9963518, -9424487, -4378841,
# # -4940436, 7277794, 2982246,
# # -5537775, -2295755, 6420207,
# # ))

# test_data = "1704 -49196 71728 -64774 -22794 -8234 76389 -49666 -66803 -31496 -78513 -33198 -46667 -227 -72580 -41372 -44729 74279 -75403 -16027 -77821 45433 -63821 8955 59768 16499 79145 -40224 -69031 -41125 -66357 12673 -10321 -74628 27898 46884 -2863 24288 77218 10334 72792 78705 57136 -53875 -1522 64555 -15248 33749 58835 -10651 -62277 61014 -45218 -46099 -10030 -65449 50400 -10885 -25674 61368 27990 -12031 -5958 -62331 -6660 -58060 64553 70476 46228 61771 811 39020 60476 -22053 65145 -21045 -37498 -30103 -67295 -58662 39246 -49573 -77648 74028 -15672 -7679 -71421 -45272 61436 -17095 -63903 9426 50873 10138 27094 -35786 32078 11647 -45309 -1694 -6581 35501 -42673 -26104 -66552 -57528 32850 -24051 -7631 45555 -2713 -48385 75981 -362 -54357 -19691 71959 -45779 15036 53395 17126 31132 -17179 -12001 -38729 -70084 32213 73348 21563 66903 -8345 -65018 22404 28981 -11122 35851 51453 -58272 -68199 -36178 67282 9087 -4564 63264 -71274 21079 -36427 -79315 55299 58609 54079 -7574 9742 -43099 60425 51012 -33184 12638 44360 68378 -459 -43985 -76639 -58054 64996 -7762 57797 36449 13966 69597 -79729 1248 -1315 -4293 -15487 7411 -63214 28085 8096 72085 6695 -17824 -15489 -63563 19076 -35064 67448 65891 57574 31809 54270 -22885 67824 57630 -939 52820 -30132 -23142 9270 63833 -33544 9541 -14918 45141 -74751 49594 -27448 -57966 -2320 60647 -65880 -75624 -37176 -1369 -59188 61899 43566 -71739 47791 21140 40069 22061 78255 27893 -309 -2684 714 49559 54173 -70015 33392 -59370 19525 -61525 65770 24773 68069 -41677 46807 -14251 -61029 60927 -9876 -18206 -20442 10936 -36307 -56876 19196 -68516 44264 -20734 33544 42520 -72841 -46764 -40164 7873 -77205 -65990 17858 36187 -45361 -42617 54661 -59590 62156 42730 -21268 28964 -51520 -2298 9891 18604 59495 69449 -50460 -56811 -67426 48735 -45328 56837 -51999 68216 19357 -44840 -58547 59193 43033 -55753 73202 -19109 60434 -52158 18274 35096 -31749 431 -2173 26983"

# def max_min(test_data):
#     max_int = 0 
#     min_int = 0
#     for el in test_data.split(" "):
#         if int(el) > max_int:
#             max_int = int(el)
#         if int(el) < min_int:
#             min_int = int(el)
    
#     return f"{max_int} {min_int}"


# print(max_min(test_data))
from functools import reduce 

def mult_3_5_sum(num):
    mylist = [el for el in range(1,num) if el % 3 == 0 or el % 5 == 0]
    result =  reduce(lambda x, y: x + y, mylist)
    print(result)

# mult_3_5_sum(1000)

def even_fibo():
    fibo = [1,2]
    while fibo[-1] + fibo[-2] < 4000000:
        fibo.append(fibo[-1] + fibo[-2])
    evens = list(filter(lambda x: x % 2 == 0, fibo))
    print(reduce(lambda x,y: x + y, evens))

# even_fibo()

def largest_prime_factor(num):
    factors = [] 
    i = 2
    while num != 1:
        if num % i == 0:
            factors.append(i)
            num /= i 
        else:
            i += 1
    return factors[-1]
        
# print(largest_prime_factor(600851475143))

def largest_palindrome():
    num, num2 = 999, 999
    palindrome = 0
    for x in range(num2, -1,-1):
        for y in range(num, -1,-1):
            answer = x * y
            if str(answer) == str(answer)[::-1] and answer > palindrome:
                palindrome = answer
    return palindrome

# print(largest_palindrome())
